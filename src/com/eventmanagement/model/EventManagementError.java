package com.eventmanagement.model;

import java.io.Serializable;
import java.util.Collection;



public class EventManagementError implements Serializable {
    private static final long serialVersionUID = 1L;

    /**
     * A link to the Application specific problem types.  Otherwise, a link to HTTP error code page would be provided. 
     */    
    private String type;

    /**
     * This is the summary error message.
     */
    private String title;

    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem.
     */
    private Integer status;
 
    /**
     * This property captures the detailed error message.
     */
    private String detail;
    
    /**
     * This is a URI to the link that provides more detailed information about the error.
     */
    private String instance;
    
    /**
     * This is the Application error code.  This is different from the HTTP error code.
     */
    private String errorCode;
    
    /**
     * XPath or JSON path to indicate where the error occurs.
     * It could be at a singular resource level,  or even at attribute/field level.
     */
    private String errorPath;
    
    /**
     * When multiple issues occur, the exceptions can be organized in a hierarchical structure.
     */
    private Collection<EventManagementError> errorDetails;
    
    public EventManagementError() {
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public String getDetail() {
        return detail;
    }

    public void setDetail(String detail) {
        this.detail = detail;
    }

    public String getInstance() {
        return instance;
    }

    public void setInstance(String instance) {
        this.instance = instance;
    }

    public String getErrorCode() {
        return errorCode;
    }

    public void setErrorCode(String errorCode) {
        this.errorCode = errorCode;
    }

    public String getErrorPath() {
        return errorPath;
    }

    public void setErrorPath(String errorPath) {
        this.errorPath = errorPath;
    }

    public Collection<EventManagementError> getErrorDetails() {
        return errorDetails;
    }

    public void setErrorDetails(Collection<EventManagementError> errorDetails) {
        this.errorDetails = errorDetails;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((detail == null) ? 0 : detail.hashCode());
        result = prime * result
                + ((errorCode == null) ? 0 : errorCode.hashCode());
        result = prime * result
                + ((errorDetails == null) ? 0 : errorDetails.hashCode());
        result = prime * result
                + ((errorPath == null) ? 0 : errorPath.hashCode());
        result = prime * result
                + ((instance == null) ? 0 : instance.hashCode());
        result = prime * result + ((status == null) ? 0 : status.hashCode());
        result = prime * result + ((title == null) ? 0 : title.hashCode());
        result = prime * result + ((type == null) ? 0 : type.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        EventManagementError other = (EventManagementError) obj;
        if (detail == null) {
            if (other.detail != null)
                return false;
        } else if (!detail.equals(other.detail))
            return false;
        if (errorCode == null) {
            if (other.errorCode != null)
                return false;
        } else if (!errorCode.equals(other.errorCode))
            return false;
        if (errorDetails == null) {
            if (other.errorDetails != null)
                return false;
        } else if (!errorDetails.equals(other.errorDetails))
            return false;
        if (errorPath == null) {
            if (other.errorPath != null)
                return false;
        } else if (!errorPath.equals(other.errorPath))
            return false;
        if (instance == null) {
            if (other.instance != null)
                return false;
        } else if (!instance.equals(other.instance))
            return false;
        if (status == null) {
            if (other.status != null)
                return false;
        } else if (!status.equals(other.status))
            return false;
        if (title == null) {
            if (other.title != null)
                return false;
        } else if (!title.equals(other.title))
            return false;
        if (type == null) {
            if (other.type != null)
                return false;
        } else if (!type.equals(other.type))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return "EventManagementError [type=" + type + ", title="
                + title + ", status=" + status + ", detail=" + detail
                + ", instance=" + instance + ", errorCode=" + errorCode
                + ", errorPath=" + errorPath + ", errorDetails=" + errorDetails
                + "]";
    }
}